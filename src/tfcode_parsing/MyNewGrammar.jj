/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(MyNewGrammar)
package pp;

public class MyNewGrammar
{

public static StringBuffer outputs = new StringBuffer("");  
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter :\n");
      try
      {
        switch (MyNewGrammar.one_line())
        {
          case 0 : 
          System.out.println("Parsing Correctly. Here's your outputs.....");
          System.out.println(outputs.toString());
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < EQUAL : "=" >
| < RESHAPE : "reshape(">
| < VARIABLE : "variable(">
| < CONV : "conv(">
| < ADD : "add(">
| < RELU : "relu(">
| < MAX_POOL : "max_pool(">
| < GRAPH : "graph">
| < INPUTS : "inputs" >
| < OUTPUTS : "outputs" >
| < COMMA : ",">
}

TOKEN :
{
 < REAL_NUMBER : "-" (< DIGIT >)+ | (< DIGIT >)+>
| < #DIGIT : [ "0"-"9" ] >
| < ALPHABET : (< LETTER >)+ >
| < #LETTER : ( ["a"-"z"] | ["A"-"Z"] | ["_"] )+>
}

int one_line() :
{
  System.out.println();
}
{
	< GRAPH >			{outputs.append("\n" + "result");}
	"["					{outputs.append(getToken(0));}
	studentid()
	"]"					{outputs.append(getToken(0));}
		
	"("					{outputs.append(getToken(0));}
	< INPUTS>			{outputs.append(getToken(0));}
	")"					{outputs.append(getToken(0));}
	"-"					{outputs.append(getToken(0));}
	">"					{outputs.append(getToken(0));}
	"("					{outputs.append(getToken(0));}
	< OUTPUTS>			{outputs.append(getToken(0));}
	")"					{outputs.append(getToken(0));}
	"{"					{outputs.append("\n" + getToken(0) + "\n");}
	code()
	"}"					{outputs.append("\n" + getToken(0));}
	{
	  return 0;
	}
}

void studentid() :
{}
{
  ( < REAL_NUMBER> {outputs.append(getToken(0));})+ 
}

void code() :
{}
{
  variable_name()
  < EQUAL>			{outputs.append(" " + getToken(0) + " ");}
  function()
  ";"				{outputs.append("\n");}
  code() 
| < OUTPUTS>		{outputs.append(getToken(0));}
  < EQUAL>			{outputs.append(getToken(0));}
  function()
  ";"				{outputs.append("\n");}
| ""
}

void variable_name() :
{}
{
  (< REAL_NUMBER> {outputs.append(getToken(0));}
  | < ALPHABET> {outputs.append(getToken(0));}
  )+ 
}

void function() :
{}
{
  < RESHAPE >		{outputs.append("tf.reshape(");}
  < INPUTS>			{outputs.append(getToken(0));}
  < COMMA>			{outputs.append(getToken(0) + " ");}
  "["				{outputs.append(getToken(0));}
  array()
  "]"				{outputs.append(getToken(0));}
  ")" 				{outputs.append(getToken(0));}
| < VARIABLE >		{outputs.append("tf.Variable(tf.random_normal(");}
  "["				{outputs.append(getToken(0));}
  array()
  "]"				{outputs.append(getToken(0));}
  ")" 				{outputs.append("))");}
| < CONV >			{outputs.append("tf.nn.conv2d(");}
  variable_name()	
  ")" 				{outputs.append(getToken(0));}
| < ADD >			{outputs.append("tf.add(");}
  variable_name()	
  < COMMA>			{outputs.append(getToken(0) + " ");}
  variable_name()
  ")" 				{outputs.append(getToken(0));}
| < RELU >			{outputs.append("tf.nn.relu(");}
  variable_name()
  ")"				{outputs.append(getToken(0));}
| < MAX_POOL>		{outputs.append("tf.nn.max_pool(");}
  variable_name()
  ")"				{outputs.append(getToken(0));}
}

void array() :
{}
{
  < REAL_NUMBER>			{outputs.append(getToken(0));}
  (< COMMA>					{outputs.append(getToken(0));}
   < REAL_NUMBER> 			{outputs.append(getToken(0));}
   )* 
}
